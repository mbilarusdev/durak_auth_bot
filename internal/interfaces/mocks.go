// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package interfaces

import (
	"context"
	"net/http"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCacheStatusCmd creates a new instance of MockCacheStatusCmd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheStatusCmd(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheStatusCmd {
	mock := &MockCacheStatusCmd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheStatusCmd is an autogenerated mock type for the CacheStatusCmd type
type MockCacheStatusCmd struct {
	mock.Mock
}

type MockCacheStatusCmd_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheStatusCmd) EXPECT() *MockCacheStatusCmd_Expecter {
	return &MockCacheStatusCmd_Expecter{mock: &_m.Mock}
}

// Result provides a mock function for the type MockCacheStatusCmd
func (_mock *MockCacheStatusCmd) Result() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Result")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheStatusCmd_Result_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Result'
type MockCacheStatusCmd_Result_Call struct {
	*mock.Call
}

// Result is a helper method to define mock.On call
func (_e *MockCacheStatusCmd_Expecter) Result() *MockCacheStatusCmd_Result_Call {
	return &MockCacheStatusCmd_Result_Call{Call: _e.mock.On("Result")}
}

func (_c *MockCacheStatusCmd_Result_Call) Run(run func()) *MockCacheStatusCmd_Result_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheStatusCmd_Result_Call) Return(s string, err error) *MockCacheStatusCmd_Result_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCacheStatusCmd_Result_Call) RunAndReturn(run func() (string, error)) *MockCacheStatusCmd_Result_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheStringCmd creates a new instance of MockCacheStringCmd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheStringCmd(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheStringCmd {
	mock := &MockCacheStringCmd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheStringCmd is an autogenerated mock type for the CacheStringCmd type
type MockCacheStringCmd struct {
	mock.Mock
}

type MockCacheStringCmd_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheStringCmd) EXPECT() *MockCacheStringCmd_Expecter {
	return &MockCacheStringCmd_Expecter{mock: &_m.Mock}
}

// Result provides a mock function for the type MockCacheStringCmd
func (_mock *MockCacheStringCmd) Result() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Result")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheStringCmd_Result_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Result'
type MockCacheStringCmd_Result_Call struct {
	*mock.Call
}

// Result is a helper method to define mock.On call
func (_e *MockCacheStringCmd_Expecter) Result() *MockCacheStringCmd_Result_Call {
	return &MockCacheStringCmd_Result_Call{Call: _e.mock.On("Result")}
}

func (_c *MockCacheStringCmd_Result_Call) Run(run func()) *MockCacheStringCmd_Result_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheStringCmd_Result_Call) Return(s string, err error) *MockCacheStringCmd_Result_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCacheStringCmd_Result_Call) RunAndReturn(run func() (string, error)) *MockCacheStringCmd_Result_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheIntCmd creates a new instance of MockCacheIntCmd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheIntCmd(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheIntCmd {
	mock := &MockCacheIntCmd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheIntCmd is an autogenerated mock type for the CacheIntCmd type
type MockCacheIntCmd struct {
	mock.Mock
}

type MockCacheIntCmd_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheIntCmd) EXPECT() *MockCacheIntCmd_Expecter {
	return &MockCacheIntCmd_Expecter{mock: &_m.Mock}
}

// Result provides a mock function for the type MockCacheIntCmd
func (_mock *MockCacheIntCmd) Result() (int64, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Result")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int64, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheIntCmd_Result_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Result'
type MockCacheIntCmd_Result_Call struct {
	*mock.Call
}

// Result is a helper method to define mock.On call
func (_e *MockCacheIntCmd_Expecter) Result() *MockCacheIntCmd_Result_Call {
	return &MockCacheIntCmd_Result_Call{Call: _e.mock.On("Result")}
}

func (_c *MockCacheIntCmd_Result_Call) Run(run func()) *MockCacheIntCmd_Result_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheIntCmd_Result_Call) Return(n int64, err error) *MockCacheIntCmd_Result_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockCacheIntCmd_Result_Call) RunAndReturn(run func() (int64, error)) *MockCacheIntCmd_Result_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheManager creates a new instance of MockCacheManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheManager {
	mock := &MockCacheManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheManager is an autogenerated mock type for the CacheManager type
type MockCacheManager struct {
	mock.Mock
}

type MockCacheManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheManager) EXPECT() *MockCacheManager_Expecter {
	return &MockCacheManager_Expecter{mock: &_m.Mock}
}

// Del provides a mock function for the type MockCacheManager
func (_mock *MockCacheManager) Del(ctx context.Context, keys ...string) CacheIntCmd {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(ctx, keys)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 CacheIntCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...string) CacheIntCmd); ok {
		r0 = returnFunc(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CacheIntCmd)
		}
	}
	return r0
}

// MockCacheManager_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockCacheManager_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockCacheManager_Expecter) Del(ctx interface{}, keys ...interface{}) *MockCacheManager_Del_Call {
	return &MockCacheManager_Del_Call{Call: _e.mock.On("Del",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockCacheManager_Del_Call) Run(run func(ctx context.Context, keys ...string)) *MockCacheManager_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockCacheManager_Del_Call) Return(cacheIntCmd CacheIntCmd) *MockCacheManager_Del_Call {
	_c.Call.Return(cacheIntCmd)
	return _c
}

func (_c *MockCacheManager_Del_Call) RunAndReturn(run func(ctx context.Context, keys ...string) CacheIntCmd) *MockCacheManager_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCacheManager
func (_mock *MockCacheManager) Get(ctx context.Context, key string) CacheStringCmd {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 CacheStringCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) CacheStringCmd); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CacheStringCmd)
		}
	}
	return r0
}

// MockCacheManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacheManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCacheManager_Expecter) Get(ctx interface{}, key interface{}) *MockCacheManager_Get_Call {
	return &MockCacheManager_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockCacheManager_Get_Call) Run(run func(ctx context.Context, key string)) *MockCacheManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheManager_Get_Call) Return(cacheStringCmd CacheStringCmd) *MockCacheManager_Get_Call {
	_c.Call.Return(cacheStringCmd)
	return _c
}

func (_c *MockCacheManager_Get_Call) RunAndReturn(run func(ctx context.Context, key string) CacheStringCmd) *MockCacheManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockCacheManager
func (_mock *MockCacheManager) Set(ctx context.Context, key string, value any, expiration time.Duration) CacheStatusCmd {
	ret := _mock.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 CacheStatusCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any, time.Duration) CacheStatusCmd); ok {
		r0 = returnFunc(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CacheStatusCmd)
		}
	}
	return r0
}

// MockCacheManager_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCacheManager_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value any
//   - expiration time.Duration
func (_e *MockCacheManager_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *MockCacheManager_Set_Call {
	return &MockCacheManager_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expiration)}
}

func (_c *MockCacheManager_Set_Call) Run(run func(ctx context.Context, key string, value any, expiration time.Duration)) *MockCacheManager_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockCacheManager_Set_Call) Return(cacheStatusCmd CacheStatusCmd) *MockCacheManager_Set_Call {
	_c.Call.Return(cacheStatusCmd)
	return _c
}

func (_c *MockCacheManager_Set_Call) RunAndReturn(run func(ctx context.Context, key string, value any, expiration time.Duration) CacheStatusCmd) *MockCacheManager_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDBConn creates a new instance of MockDBConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBConn {
	mock := &MockDBConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBConn is an autogenerated mock type for the DBConn type
type MockDBConn struct {
	mock.Mock
}

type MockDBConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBConn) EXPECT() *MockDBConn_Expecter {
	return &MockDBConn_Expecter{mock: &_m.Mock}
}

// QueryRow provides a mock function for the type MockDBConn
func (_mock *MockDBConn) QueryRow(ctx context.Context, sql string, args ...any) DBRow {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, sql, args)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 DBRow
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) DBRow); ok {
		r0 = returnFunc(ctx, sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DBRow)
		}
	}
	return r0
}

// MockDBConn_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockDBConn_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...any
func (_e *MockDBConn_Expecter) QueryRow(ctx interface{}, sql interface{}, args ...interface{}) *MockDBConn_QueryRow_Call {
	return &MockDBConn_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *MockDBConn_QueryRow_Call) Run(run func(ctx context.Context, sql string, args ...any)) *MockDBConn_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDBConn_QueryRow_Call) Return(dBRow DBRow) *MockDBConn_QueryRow_Call {
	_c.Call.Return(dBRow)
	return _c
}

func (_c *MockDBConn_QueryRow_Call) RunAndReturn(run func(ctx context.Context, sql string, args ...any) DBRow) *MockDBConn_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function for the type MockDBConn
func (_mock *MockDBConn) Release() {
	_mock.Called()
	return
}

// MockDBConn_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type MockDBConn_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
func (_e *MockDBConn_Expecter) Release() *MockDBConn_Release_Call {
	return &MockDBConn_Release_Call{Call: _e.mock.On("Release")}
}

func (_c *MockDBConn_Release_Call) Run(run func()) *MockDBConn_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBConn_Release_Call) Return() *MockDBConn_Release_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDBConn_Release_Call) RunAndReturn(run func()) *MockDBConn_Release_Call {
	_c.Run(run)
	return _c
}

// NewMockDBPool creates a new instance of MockDBPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBPool {
	mock := &MockDBPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBPool is an autogenerated mock type for the DBPool type
type MockDBPool struct {
	mock.Mock
}

type MockDBPool_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBPool) EXPECT() *MockDBPool_Expecter {
	return &MockDBPool_Expecter{mock: &_m.Mock}
}

// Acquire provides a mock function for the type MockDBPool
func (_mock *MockDBPool) Acquire(ctx context.Context) (DBConn, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Acquire")
	}

	var r0 DBConn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (DBConn, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) DBConn); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DBConn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPool_Acquire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acquire'
type MockDBPool_Acquire_Call struct {
	*mock.Call
}

// Acquire is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDBPool_Expecter) Acquire(ctx interface{}) *MockDBPool_Acquire_Call {
	return &MockDBPool_Acquire_Call{Call: _e.mock.On("Acquire", ctx)}
}

func (_c *MockDBPool_Acquire_Call) Run(run func(ctx context.Context)) *MockDBPool_Acquire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBPool_Acquire_Call) Return(c DBConn, err error) *MockDBPool_Acquire_Call {
	_c.Call.Return(c, err)
	return _c
}

func (_c *MockDBPool_Acquire_Call) RunAndReturn(run func(ctx context.Context) (DBConn, error)) *MockDBPool_Acquire_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDBRow creates a new instance of MockDBRow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBRow(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBRow {
	mock := &MockDBRow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBRow is an autogenerated mock type for the DBRow type
type MockDBRow struct {
	mock.Mock
}

type MockDBRow_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBRow) EXPECT() *MockDBRow_Expecter {
	return &MockDBRow_Expecter{mock: &_m.Mock}
}

// Scan provides a mock function for the type MockDBRow
func (_mock *MockDBRow) Scan(dest ...any) error {
	var tmpRet mock.Arguments
	if len(dest) > 0 {
		tmpRet = _mock.Called(dest)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...any) error); ok {
		r0 = returnFunc(dest...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBRow_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockDBRow_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - dest ...any
func (_e *MockDBRow_Expecter) Scan(dest ...interface{}) *MockDBRow_Scan_Call {
	return &MockDBRow_Scan_Call{Call: _e.mock.On("Scan",
		append([]interface{}{}, dest...)...)}
}

func (_c *MockDBRow_Scan_Call) Run(run func(dest ...any)) *MockDBRow_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []any
		var variadicArgs []any
		if len(args) > 0 {
			variadicArgs = args[0].([]any)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockDBRow_Scan_Call) Return(err error) *MockDBRow_Scan_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBRow_Scan_Call) RunAndReturn(run func(dest ...any) error) *MockDBRow_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEndpoint creates a new instance of MockEndpoint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEndpoint(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEndpoint {
	mock := &MockEndpoint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEndpoint is an autogenerated mock type for the Endpoint type
type MockEndpoint struct {
	mock.Mock
}

type MockEndpoint_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEndpoint) EXPECT() *MockEndpoint_Expecter {
	return &MockEndpoint_Expecter{mock: &_m.Mock}
}

// Call provides a mock function for the type MockEndpoint
func (_mock *MockEndpoint) Call(w http.ResponseWriter, r *http.Request) error {
	ret := _mock.Called(w, r)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		r0 = returnFunc(w, r)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEndpoint_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type MockEndpoint_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockEndpoint_Expecter) Call(w interface{}, r interface{}) *MockEndpoint_Call_Call {
	return &MockEndpoint_Call_Call{Call: _e.mock.On("Call", w, r)}
}

func (_c *MockEndpoint_Call_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockEndpoint_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEndpoint_Call_Call) Return(err error) *MockEndpoint_Call_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEndpoint_Call_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request) error) *MockEndpoint_Call_Call {
	_c.Call.Return(run)
	return _c
}
