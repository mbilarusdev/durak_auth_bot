// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package interfaces

import (
	"context"
	"time"

	"github.com/go-redis/redis/v8"
	"github.com/jackc/pgx/v5/pgxpool"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCacheManager creates a new instance of MockCacheManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheManager {
	mock := &MockCacheManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheManager is an autogenerated mock type for the CacheManager type
type MockCacheManager struct {
	mock.Mock
}

type MockCacheManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheManager) EXPECT() *MockCacheManager_Expecter {
	return &MockCacheManager_Expecter{mock: &_m.Mock}
}

// Del provides a mock function for the type MockCacheManager
func (_mock *MockCacheManager) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(ctx, keys)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 *redis.IntCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...string) *redis.IntCmd); ok {
		r0 = returnFunc(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}
	return r0
}

// MockCacheManager_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockCacheManager_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockCacheManager_Expecter) Del(ctx interface{}, keys ...interface{}) *MockCacheManager_Del_Call {
	return &MockCacheManager_Del_Call{Call: _e.mock.On("Del",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockCacheManager_Del_Call) Run(run func(ctx context.Context, keys ...string)) *MockCacheManager_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockCacheManager_Del_Call) Return(intCmd *redis.IntCmd) *MockCacheManager_Del_Call {
	_c.Call.Return(intCmd)
	return _c
}

func (_c *MockCacheManager_Del_Call) RunAndReturn(run func(ctx context.Context, keys ...string) *redis.IntCmd) *MockCacheManager_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCacheManager
func (_mock *MockCacheManager) Get(ctx context.Context, key string) *redis.StringCmd {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *redis.StringCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}
	return r0
}

// MockCacheManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacheManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCacheManager_Expecter) Get(ctx interface{}, key interface{}) *MockCacheManager_Get_Call {
	return &MockCacheManager_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockCacheManager_Get_Call) Run(run func(ctx context.Context, key string)) *MockCacheManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheManager_Get_Call) Return(stringCmd *redis.StringCmd) *MockCacheManager_Get_Call {
	_c.Call.Return(stringCmd)
	return _c
}

func (_c *MockCacheManager_Get_Call) RunAndReturn(run func(ctx context.Context, key string) *redis.StringCmd) *MockCacheManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockCacheManager
func (_mock *MockCacheManager) Set(ctx context.Context, key string, value any, expiration time.Duration) *redis.StatusCmd {
	ret := _mock.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *redis.StatusCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any, time.Duration) *redis.StatusCmd); ok {
		r0 = returnFunc(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}
	return r0
}

// MockCacheManager_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCacheManager_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value any
//   - expiration time.Duration
func (_e *MockCacheManager_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *MockCacheManager_Set_Call {
	return &MockCacheManager_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expiration)}
}

func (_c *MockCacheManager_Set_Call) Run(run func(ctx context.Context, key string, value any, expiration time.Duration)) *MockCacheManager_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockCacheManager_Set_Call) Return(statusCmd *redis.StatusCmd) *MockCacheManager_Set_Call {
	_c.Call.Return(statusCmd)
	return _c
}

func (_c *MockCacheManager_Set_Call) RunAndReturn(run func(ctx context.Context, key string, value any, expiration time.Duration) *redis.StatusCmd) *MockCacheManager_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDBPool creates a new instance of MockDBPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBPool {
	mock := &MockDBPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBPool is an autogenerated mock type for the DBPool type
type MockDBPool struct {
	mock.Mock
}

type MockDBPool_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBPool) EXPECT() *MockDBPool_Expecter {
	return &MockDBPool_Expecter{mock: &_m.Mock}
}

// Acquire provides a mock function for the type MockDBPool
func (_mock *MockDBPool) Acquire(ctx context.Context) (*pgxpool.Conn, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Acquire")
	}

	var r0 *pgxpool.Conn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*pgxpool.Conn, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *pgxpool.Conn); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgxpool.Conn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPool_Acquire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acquire'
type MockDBPool_Acquire_Call struct {
	*mock.Call
}

// Acquire is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDBPool_Expecter) Acquire(ctx interface{}) *MockDBPool_Acquire_Call {
	return &MockDBPool_Acquire_Call{Call: _e.mock.On("Acquire", ctx)}
}

func (_c *MockDBPool_Acquire_Call) Run(run func(ctx context.Context)) *MockDBPool_Acquire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBPool_Acquire_Call) Return(c *pgxpool.Conn, err error) *MockDBPool_Acquire_Call {
	_c.Call.Return(c, err)
	return _c
}

func (_c *MockDBPool_Acquire_Call) RunAndReturn(run func(ctx context.Context) (*pgxpool.Conn, error)) *MockDBPool_Acquire_Call {
	_c.Call.Return(run)
	return _c
}
