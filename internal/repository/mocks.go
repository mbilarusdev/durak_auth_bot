// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"github.com/mbilarusdev/durak_auth_bot/internal/structs/app/model"
	"github.com/mbilarusdev/durak_auth_bot/internal/structs/app/option"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCodeProvider creates a new instance of MockCodeProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCodeProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCodeProvider {
	mock := &MockCodeProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCodeProvider is an autogenerated mock type for the CodeProvider type
type MockCodeProvider struct {
	mock.Mock
}

type MockCodeProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCodeProvider) EXPECT() *MockCodeProvider_Expecter {
	return &MockCodeProvider_Expecter{mock: &_m.Mock}
}

// Del provides a mock function for the type MockCodeProvider
func (_mock *MockCodeProvider) Del(phoneNumber string) error {
	ret := _mock.Called(phoneNumber)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(phoneNumber)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCodeProvider_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockCodeProvider_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - phoneNumber string
func (_e *MockCodeProvider_Expecter) Del(phoneNumber interface{}) *MockCodeProvider_Del_Call {
	return &MockCodeProvider_Del_Call{Call: _e.mock.On("Del", phoneNumber)}
}

func (_c *MockCodeProvider_Del_Call) Run(run func(phoneNumber string)) *MockCodeProvider_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCodeProvider_Del_Call) Return(err error) *MockCodeProvider_Del_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCodeProvider_Del_Call) RunAndReturn(run func(phoneNumber string) error) *MockCodeProvider_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCodeProvider
func (_mock *MockCodeProvider) Get(phoneNumber string) (string, error) {
	ret := _mock.Called(phoneNumber)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(phoneNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(phoneNumber)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(phoneNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCodeProvider_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCodeProvider_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - phoneNumber string
func (_e *MockCodeProvider_Expecter) Get(phoneNumber interface{}) *MockCodeProvider_Get_Call {
	return &MockCodeProvider_Get_Call{Call: _e.mock.On("Get", phoneNumber)}
}

func (_c *MockCodeProvider_Get_Call) Run(run func(phoneNumber string)) *MockCodeProvider_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCodeProvider_Get_Call) Return(s string, err error) *MockCodeProvider_Get_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCodeProvider_Get_Call) RunAndReturn(run func(phoneNumber string) (string, error)) *MockCodeProvider_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockCodeProvider
func (_mock *MockCodeProvider) Save(phoneNumber string, code string) error {
	ret := _mock.Called(phoneNumber, code)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(phoneNumber, code)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCodeProvider_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockCodeProvider_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - phoneNumber string
//   - code string
func (_e *MockCodeProvider_Expecter) Save(phoneNumber interface{}, code interface{}) *MockCodeProvider_Save_Call {
	return &MockCodeProvider_Save_Call{Call: _e.mock.On("Save", phoneNumber, code)}
}

func (_c *MockCodeProvider_Save_Call) Run(run func(phoneNumber string, code string)) *MockCodeProvider_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCodeProvider_Save_Call) Return(err error) *MockCodeProvider_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCodeProvider_Save_Call) RunAndReturn(run func(phoneNumber string, code string) error) *MockCodeProvider_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPlayerProvider creates a new instance of MockPlayerProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlayerProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlayerProvider {
	mock := &MockPlayerProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPlayerProvider is an autogenerated mock type for the PlayerProvider type
type MockPlayerProvider struct {
	mock.Mock
}

type MockPlayerProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlayerProvider) EXPECT() *MockPlayerProvider_Expecter {
	return &MockPlayerProvider_Expecter{mock: &_m.Mock}
}

// FindOne provides a mock function for the type MockPlayerProvider
func (_mock *MockPlayerProvider) FindOne(options *app_option.PlayerFindOptions) (*app_model.Player, error) {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *app_model.Player
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*app_option.PlayerFindOptions) (*app_model.Player, error)); ok {
		return returnFunc(options)
	}
	if returnFunc, ok := ret.Get(0).(func(*app_option.PlayerFindOptions) *app_model.Player); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*app_model.Player)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*app_option.PlayerFindOptions) error); ok {
		r1 = returnFunc(options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlayerProvider_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockPlayerProvider_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - options *app_option.PlayerFindOptions
func (_e *MockPlayerProvider_Expecter) FindOne(options interface{}) *MockPlayerProvider_FindOne_Call {
	return &MockPlayerProvider_FindOne_Call{Call: _e.mock.On("FindOne", options)}
}

func (_c *MockPlayerProvider_FindOne_Call) Run(run func(options *app_option.PlayerFindOptions)) *MockPlayerProvider_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *app_option.PlayerFindOptions
		if args[0] != nil {
			arg0 = args[0].(*app_option.PlayerFindOptions)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPlayerProvider_FindOne_Call) Return(player *app_model.Player, err error) *MockPlayerProvider_FindOne_Call {
	_c.Call.Return(player, err)
	return _c
}

func (_c *MockPlayerProvider_FindOne_Call) RunAndReturn(run func(options *app_option.PlayerFindOptions) (*app_model.Player, error)) *MockPlayerProvider_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockPlayerProvider
func (_mock *MockPlayerProvider) Insert(player *app_model.Player) (uint64, error) {
	ret := _mock.Called(player)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 uint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*app_model.Player) (uint64, error)); ok {
		return returnFunc(player)
	}
	if returnFunc, ok := ret.Get(0).(func(*app_model.Player) uint64); ok {
		r0 = returnFunc(player)
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func(*app_model.Player) error); ok {
		r1 = returnFunc(player)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlayerProvider_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockPlayerProvider_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - player *app_model.Player
func (_e *MockPlayerProvider_Expecter) Insert(player interface{}) *MockPlayerProvider_Insert_Call {
	return &MockPlayerProvider_Insert_Call{Call: _e.mock.On("Insert", player)}
}

func (_c *MockPlayerProvider_Insert_Call) Run(run func(player *app_model.Player)) *MockPlayerProvider_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *app_model.Player
		if args[0] != nil {
			arg0 = args[0].(*app_model.Player)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPlayerProvider_Insert_Call) Return(v uint64, err error) *MockPlayerProvider_Insert_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockPlayerProvider_Insert_Call) RunAndReturn(run func(player *app_model.Player) (uint64, error)) *MockPlayerProvider_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenProvider creates a new instance of MockTokenProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenProvider {
	mock := &MockTokenProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTokenProvider is an autogenerated mock type for the TokenProvider type
type MockTokenProvider struct {
	mock.Mock
}

type MockTokenProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenProvider) EXPECT() *MockTokenProvider_Expecter {
	return &MockTokenProvider_Expecter{mock: &_m.Mock}
}

// FindOne provides a mock function for the type MockTokenProvider
func (_mock *MockTokenProvider) FindOne(options *app_option.TokenFindOptions) (*app_model.Token, error) {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *app_model.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*app_option.TokenFindOptions) (*app_model.Token, error)); ok {
		return returnFunc(options)
	}
	if returnFunc, ok := ret.Get(0).(func(*app_option.TokenFindOptions) *app_model.Token); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*app_model.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*app_option.TokenFindOptions) error); ok {
		r1 = returnFunc(options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenProvider_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockTokenProvider_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - options *app_option.TokenFindOptions
func (_e *MockTokenProvider_Expecter) FindOne(options interface{}) *MockTokenProvider_FindOne_Call {
	return &MockTokenProvider_FindOne_Call{Call: _e.mock.On("FindOne", options)}
}

func (_c *MockTokenProvider_FindOne_Call) Run(run func(options *app_option.TokenFindOptions)) *MockTokenProvider_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *app_option.TokenFindOptions
		if args[0] != nil {
			arg0 = args[0].(*app_option.TokenFindOptions)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTokenProvider_FindOne_Call) Return(token *app_model.Token, err error) *MockTokenProvider_FindOne_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockTokenProvider_FindOne_Call) RunAndReturn(run func(options *app_option.TokenFindOptions) (*app_model.Token, error)) *MockTokenProvider_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockTokenProvider
func (_mock *MockTokenProvider) Insert(token *app_model.Token) (uint64, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 uint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*app_model.Token) (uint64, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(*app_model.Token) uint64); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func(*app_model.Token) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenProvider_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockTokenProvider_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - token *app_model.Token
func (_e *MockTokenProvider_Expecter) Insert(token interface{}) *MockTokenProvider_Insert_Call {
	return &MockTokenProvider_Insert_Call{Call: _e.mock.On("Insert", token)}
}

func (_c *MockTokenProvider_Insert_Call) Run(run func(token *app_model.Token)) *MockTokenProvider_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *app_model.Token
		if args[0] != nil {
			arg0 = args[0].(*app_model.Token)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTokenProvider_Insert_Call) Return(v uint64, err error) *MockTokenProvider_Insert_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockTokenProvider_Insert_Call) RunAndReturn(run func(token *app_model.Token) (uint64, error)) *MockTokenProvider_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type MockTokenProvider
func (_mock *MockTokenProvider) UpdateStatus(ID uint64, status app_model.TokenStatus) error {
	ret := _mock.Called(ID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uint64, app_model.TokenStatus) error); ok {
		r0 = returnFunc(ID, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTokenProvider_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockTokenProvider_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ID uint64
//   - status app_model.TokenStatus
func (_e *MockTokenProvider_Expecter) UpdateStatus(ID interface{}, status interface{}) *MockTokenProvider_UpdateStatus_Call {
	return &MockTokenProvider_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ID, status)}
}

func (_c *MockTokenProvider_UpdateStatus_Call) Run(run func(ID uint64, status app_model.TokenStatus)) *MockTokenProvider_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		var arg1 app_model.TokenStatus
		if args[1] != nil {
			arg1 = args[1].(app_model.TokenStatus)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTokenProvider_UpdateStatus_Call) Return(err error) *MockTokenProvider_UpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTokenProvider_UpdateStatus_Call) RunAndReturn(run func(ID uint64, status app_model.TokenStatus) error) *MockTokenProvider_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}
